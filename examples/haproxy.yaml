apiVersion: v1
kind: ServiceAccount
metadata:
  name: haproxy
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: haproxy-sync
  namespace: default
rules:
- apiGroups:
  - "discovery.k8s.io"
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: haproxy-haproxy-sync
  namespace: default
subjects:
  - kind: ServiceAccount
    name: haproxy
roleRef:
  kind: Role
  name: haproxy-sync
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: haproxy
data:
  haproxy.cfg: |
    global
      log stdout format raw local0
      stats socket /tmp/admin.sock mode 600 level admin expose-fd listeners
      stats timeout 30s
      master-worker

    defaults
      log global
      mode  http
      option  httplog
      option  dontlognull
      option  redispatch
      timeout connect 5000
      timeout client  500000
      timeout server  500000

    resolvers k8s
      parse-resolv-conf
      hold other 10s
      hold refused 10s
      hold nx 10s
      hold timeout 10s
      hold valid 10s
      hold obsolete 10s

    userlist dataplane-api
      user admin insecure-password %TEMPLATEDPASSWORD%

    peers haproxy-peers
      peer "$HOSTNAME" 0.0.0.0:3000

    # we enable the DataPlaneAPI to allow us managing the HAProxy configuration dynamically via HTTP REST APIs
    # docs: https://www.haproxy.com/documentation/dataplaneapi/enterprise/
    # dataplaneapi usage: https://github.com/haproxytech/dataplaneapi
    program api
      command sh -c "HAPROXY_CFGFILES='' /usr/bin/dataplaneapi --port=5555 --config-file=/etc/haproxy/haproxy.cfg --userlist=dataplane-api --haproxy-bin=/usr/local/sbin/haproxy --reload-delay=1 --reload-cmd='kill -SIGUSR2 1' --restart-cmd='kill -SIGUSR2 1'"
      # avoids restarting the DataPlaneAPI each time HAProxy reloads
      no option start-on-reload

    frontend front-session
      bind 0.0.0.0:8080
      option httplog
      default_backend back-session

    backend back-session
      balance uri depth 4
      hash-type consistent djb2

      stick-table type string len 32 size 1M peers haproxy-peers srvkey addr
      stick match capture.req.uri,field(4,/)
      stick store-response capture.req.uri,field(4,/)
      #option httpchk GET /
      # see: http://cbonte.github.io/haproxy-dconv/2.4/configuration.html#4-server-template
      server-template srv 3 sticky-backend.default.svc.cluster.local:80 check inter 1s resolvers k8s init-addr none
---
apiVersion: v1
kind: Service
metadata:
  name: haproxy
  namespace: default
  labels:
    app: haproxy
    tier: backend
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: haproxy
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    app: haproxy
    tier: backend
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
  namespace: default
  labels:
    app: haproxy
    tier: backend
spec:
  replicas: 3
  # we need to be careful with rollouts/restarts
  # as HAProxy peers need to propagate changes as peer join leave
  # and if pods join/leave too quickly there could be discrepancies
  # on the tables or a master can't be elected
  # so we want to wait a bit after a pod is available
  # to carry on with the termination of others
  # and we want to do one pod at a time
  minReadySeconds: 30
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: haproxy
      tier: backend
  template:
    metadata:
      labels:
        app: haproxy
        tier: backend
    spec:
      serviceAccountName: haproxy
      initContainers:
      - name: init
        image: busybox
        command:
          - "/bin/sh"
          - "-c"
          - |
            # copy config from the RO volume into the RW one
            cp /source/* /etc/haproxy && \
            # generate random password for the HAProxy DataplaneAPI
            passwd=$(cat /dev/urandom | tr -dc A-Za-z0-9 | head -c30) && \
            # write passowrd to local file for haproxy-peer-sync consumption
            echo "$passwd" > /etc/haproxy/dataplaneapi.password && \
            # write passowrd to the templated HAProxy config file for HAProxy consumption
            sed -i "s|%TEMPLATEDPASSWORD%|$passwd|" /etc/haproxy/haproxy.cfg
        volumeMounts:
        - mountPath: /source
          name: haproxy-config-ro-volume
        - mountPath: /etc/haproxy
          name: haproxy-config-rw-volume
      containers:
      - name: haproxy-peer-sync
        image: "quay.io/damdo/k8s-haproxy-peer-sync:latest"
        command:
        # need sh for shell expansion for some flag values
        - "/bin/sh"
        - "-c"
        - |
          ./k8s-haproxy-peer-sync \
          --service=haproxy \
          --namespace=default \
          --user=admin \
          --password="$(cat /etc/haproxy/dataplaneapi.password)" \
          --data-plane-api-address=127.0.0.1:5555 \
          --peer-port=3000 \
          --peer-section-name=haproxy-peers
        volumeMounts:
          - mountPath: /etc/haproxy
            name: haproxy-config-rw-volume
            readOnly: true
      - name: haproxy
        # the haproxytech version of haproxy already has the DataplaneAPI built in
        image: "haproxytech/haproxy-alpine:2.4.8"
        env:
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        ports:
        - containerPort: 8080
        - containerPort: 5555
        - containerPort: 3000
        volumeMounts:
          - mountPath: /etc/haproxy
            name: haproxy-config-rw-volume
            readOnly: false
      volumes:
        - name: haproxy-config-rw-volume
          emptyDir: {}
        - name: haproxy-config-ro-volume
          configMap:
            name: haproxy
